import hashlib
import re
from random import randint

import jwt

from backend import storage, utils

JWT_SECRET = "lUw6cdFG#89RV"
MAX_HANDLE_LEN = 20


def decode_token(token):
    """
    Tries decoding the token using the JWT secret
    On failure it returns None
    """
    try:
        return jwt.decode(token, JWT_SECRET, algorithms=["HS256"])
    except jwt.exceptions.InvalidTokenError:
        return None


def is_duplicate_handle(handle, users):
    """
    Checks if the handle given is a duplicate
    """
    for user in users:
        if user["handle_str"] == handle:
            return True

    return False


def is_valid_first_name(first_name):
    """
    Validity checks for first names
    """
    # Inclusive - uses chained comparision operators
    valid_len = 1 <= len(first_name) <= 50
    return valid_len and first_name.isalpha()


def is_valid_last_name(last_name):
    """
    Validity checks for last names
    Kept distinct from is_valid_first_name to reduce refactor if spec changes
    """
    # Inclusive - uses chained comparision operators
    valid_len = 1 <= len(last_name) <= 50
    return valid_len and last_name.isalpha()


def is_valid_password(password):
    """
    Validity checks for passwords
    """
    return len(password) >= 6 and not password.isspace()


def is_valid_email(email):
    """
    Checks if email is valid
    From https://www.geeksforgeeks.org/check-if-email-address-valid-or-not-in-python/
    """
    if re.search(r"^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$", email):
        return True

    return False


def is_registered_email(email, users):
    """
    Checks if the email is registered
    """
    for user in users:
        if user["email"] == email:
            return True
    return False


def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()


def _get_auth_store():
    """
    Returns the data store, specifically creating the users list if it doesn't exist
    """
    data_store = storage.load_data_store()
    if "users" not in data_store:
        data_store["users"] = []
    return data_store


def generate_token(u_id):
    """
    Generates a UTF-8 string representation of a JWT token
    """
    return jwt.encode({"u_id": u_id}, JWT_SECRET, algorithm="HS256").decode("utf-8")


def _generate_uid():
    """
    Generates a new unique user ID (> 32 bit integer sufficient for avoiding collisions)
    """
    return utils.generate_luid()


def _generate_random_tag(handle, factor):
    """
    Generates a random tag to append to the handle
    E.g.
    gordonzho#123
    """
    tag = '#' + " ".join(str(randint(0, 9)) for i in range(factor))

    # It is safe to slice the string in this way - in the extreme case of the tag length being
    # longer than the handle itself, the handle slice will return an empty string
    randomised_handle = handle[:-len(tag)] + tag

    return randomised_handle[:MAX_HANDLE_LEN]


def _generate_handle(first_name, last_name, users):
    """
    Generates a new handle and generates a random tag if it already exists
    """

    handle = (first_name.lower() + last_name.lower())[:MAX_HANDLE_LEN]
    uniqueness_factor = 1

    while is_duplicate_handle(handle, users):
        handle = _generate_random_tag(handle, uniqueness_factor)
        uniqueness_factor += 1

    return handle

# Given a registered users' email and password and
# generates a valid token for the user to remain authenticated
# ValueError is returned if there is a problem


def auth_login(email, password):
    # false tokens - used for testing
    token = "1234"
    u_id = "44"
    return (u_id, token)


# Given an active token, invalidates the token to log the user out.
# Given a non-valid token, does nothing
def auth_logout(token):
    pass

# Given a user's first and last name, email address, and password,
# create a new account for them and return a new token for authentication in their session
# ValueError is returned if there is a problem


def auth_register(email, password, name_first, name_last):
    """
    Given a user's first and last name, email address, and password,
    create a new account for them and return a new token for authentication in their session.
    A handle is generated that is the concatentation of a lowercase-only first name and last name.
    If the concatenation is longer than 20 characters, it is cutoff at 20 characters.
    If the handle is already taken, you may modify the handle in any way you see fit to make it unique.
    """
    data = _get_auth_store()
    users = data["users"]

    if not is_valid_first_name(name_first):
        raise ValueError("Gave an invalid first name")

    if not is_valid_last_name(name_last):
        raise ValueError("Gave an invalid last name")

    if not is_valid_password(password):
        raise ValueError("Gave an invalid password")

    if not is_valid_email(email):
        raise ValueError("Gave an invalid email")

    if is_registered_email(email, users):
        raise ValueError("Gave an already taken email")

    u_id = _generate_uid()
    token = generate_token(u_id)
    handle_str = _generate_handle(name_first, name_last, users)

    users.append({
        "u_id": u_id,
        "token": token,
        "handle_str": handle_str,
        "first_name": name_first,
        "last_name": name_last,
        "email": email,
        "hashed_password": hash_password(password)
    })

    storage.dump_data_store(data)

    return {
        "u_id": u_id,
        "token": token
    }


def auth_passwordreset_request(email):
    pass

# Given a reset code for a user, set that user's new password to the password provided
# ValueError is returned if there is a problem


def auth_passwordreset_reset(reset_code, new_password):
    pass
